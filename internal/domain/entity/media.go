// Copyright 2020 The Alexandria Foundation
//
// Licensed under the GNU Affero General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.gnu.org/licenses/agpl-3.0.en.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package entity

import (
	"fmt"
	"github.com/alexandria-oss/common-go/exception"
	"github.com/alexandria-oss/podcast-api/internal/domain/value"
	"github.com/hashicorp/go-multierror"
)

// Media holds Alexandria standard media attributes
type Media struct {
	// InternalID database-based unique identifier
	InternalID *value.ID
	// ID domain unique identifier
	// 	required
	ID *value.NanoID
	// displayName mutable media title
	//	required
	DisplayName *value.DisplayName
	// Title immutable media title
	//	required
	Title *value.Title
	// Description complete media description
	Description *value.Description
	// Explicit contains explicit content
	// 	required
	Explicit *value.Explicit
	// Language language code in ISO 639-1
	//	required
	Language *value.Language
	// Keywords list of keywords
	Keywords []*value.Keyword
	// Cover media cover picture
	// 	Image extension .jpeg, .png, .jpg and .webp only
	Cover *value.ExternalMedia
	// Canvas image or small loop-video background url
	// 	Image/Video extension .jpeg, .png, .jpg, .webp and .mp4 only
	Canvas *value.ExternalMedia
	// Metadata struct metadata
	//	required
	//	autogenerated
	Metadata *value.Metadata
	// Social social interaction(s)
	//	required
	//	autogenerated
	Social *value.SocialMetadata
}

// Start launch required operations
func (m *Media) Start() {
	m.SetFieldNames()
	m.SetExternalMediaPolicy()
	m.Metadata = value.NewMetadata()
}

// SetFieldNames set required custom field name(s)
func (m *Media) SetFieldNames() {
	m.InternalID.SetFieldName("internal_id")
	m.Cover.SetFieldName("cover")
	m.Canvas.SetFieldName("canvas")
}

// SetExternalMediaPolicy set external media business policies
func (m *Media) SetExternalMediaPolicy() {
	m.Canvas.SetIsFile(true)
	m.Canvas.SetExtensions([]string{".jpeg", ".jpg", ".png", ".webp", ".mp4"})

	m.Cover.SetIsFile(true)
	m.Cover.SetExtensions([]string{".jpeg", ".jpg", ".png", ".webp"})
}

// MarshalString marshal media into string
func (m Media) MarshalString() string {
	return fmt.Sprintf("id: %s, display_name: %s, title: %s, description: %s, explicit: %s, lang: %s",
		m.ID.Get(), m.DisplayName.Get(), m.Title.Get(), m.Description.Get(), m.Explicit.IsExplicitString(),
		m.Language.Get())
}

// IsValid verify media
func (m Media) IsValid() error {
	// Validation cases
	// - Required: ID, DisplayName, Title, Explicit, Language, Metadata, SocialMetadata
	if m.ID.Get() == "" {
		return exception.NewRequiredField("media_id")
	} else if m.DisplayName.Get() == "" {
		return exception.NewRequiredField("media_display_name")
	} else if m.Title.Get() == "" {
		return exception.NewRequiredField("media_title")
	} else if m.Language.Get() == "" {
		return exception.NewRequiredField("media_language")
	}

	// Value object
	// Only validate required
	var valueErr error
	if err := m.DisplayName.IsValid(); err != nil {
		valueErr = multierror.Append(valueErr, err)
	}
	if err := m.Title.IsValid(); err != nil {
		valueErr = multierror.Append(valueErr, err)
	}
	if err := m.Language.IsValid(); err != nil {
		valueErr = multierror.Append(valueErr, err)
	}
	if err := m.Metadata.IsValid(); err != nil {
		valueErr = multierror.Append(valueErr, err)
	}

	return valueErr
}
